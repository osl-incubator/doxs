{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#doxs","title":"Doxs","text":"<p>Documetatio from annotations</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://osl-incubator.github.io/doxs</li> </ul>"},{"location":"#features","title":"Features","text":"<p>TBD</p>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the osl-incubator/scicookie project template.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#050-2025-08-01","title":"0.5.0 (2025-08-01)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Improve the class method docstring generation (#8) (ba6bf89)</li> </ul>"},{"location":"changelog/#040-2025-08-01","title":"0.4.0 (2025-08-01)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add initial schema validation (#7) (a647142)</li> </ul>"},{"location":"changelog/#030-2025-08-01","title":"0.3.0 (2025-08-01)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Replace homemade Annotation by typing.Annotated (#6) (f098bab)</li> </ul>"},{"location":"changelog/#020-2025-07-31","title":"0.2.0 (2025-07-31)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Add missing changes (#2) (8a10850)</li> <li>Fix semantic release configuration (#5) (c25eeef)</li> </ul>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add support for docstring in yaml format (#4) (d9cbd9a)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>In order to be able to contribute, it is important that you understand the project layout.</p> <p>This project uses the src layout, which means that the package code is located at <code>./src/doxs</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/xmnlab/doxs.git/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Doxs could always use more documentation, whether as part of the official Doxs docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/xmnlab/doxs.git/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started","text":"<p>Ready to contribute? Here\u2019s how to set up <code>doxs</code> for local development.</p> <ol> <li>Fork the <code>doxs</code> repo on GitHub.</li> <li>Clone your fork locally and change to the directory of your project:</li> </ol> <pre><code>$ git clone git@github.com:your_name_here/doxs.git\n$ cd doxs/\n</code></pre> <p>Also, create a remote to the upstream repository, you will need that later:</p> <pre><code>$ git remote add upstream https://github.com/xmnlab/doxs.git\n$ git fetch --all\n</code></pre>"},{"location":"contributing/#prepare-and-use-virtual-environment","title":"Prepare and use virtual environment","text":"<p>If you don't have yet conda installed in your machine, you can check the installation steps here: conda-forge/miniforge?tab=readme-ov-file#download After that, ensure that conda is already available in your terminal session and run:</p> <pre><code>$ conda env create env create --file conda/dev.yaml\n$ conda activate doxs\n</code></pre> <p>Note: you can use <code>mamba env create</code> instead, if you have it already installed, in order to boost the installation step.</p>"},{"location":"contributing/#install-the-dependencies","title":"Install the dependencies","text":"<p>Now, you can already install the dependencies for the project:</p> <pre><code>$ poetry install\n```### Create a Development Branch\n\nMake a dedicated branch for your bugfix or feature.\n\n```bash\n$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre>"},{"location":"contributing/#make-changes-locally","title":"Make Changes Locally","text":"<p>You are now ready to implement your changes or improvements.</p>"},{"location":"contributing/#install-and-use-pre-commit-hooks","title":"Install and Use Pre-commit Hooks","text":"<ul> <li><code>doxs</code> uses a set of <code>pre-commit</code> hooks to improve code quality. The hooks can   be installed locally using:</li> </ul> <pre><code>$ pre-commit install\n</code></pre> <p>This would run the checks every time a <code>git commit</code> is executed locally. Usually, the verification will only run on the files modified by that commit, but the verification can also be triggered for all the files using:</p> <pre><code>$ pre-commit run --all-files\n</code></pre> <p>If you would like to skip the failing checks and push the code for further discussion, use the <code>--no-verify</code> option with <code>git commit</code>.</p>"},{"location":"contributing/#unit-testing-with-pytest","title":"Unit Testing with <code>pytest</code>","text":"<p>This project uses <code>pytest</code> as a testing tool. <code>pytest</code> is responsible for testing the code, whose configuration is available in pyproject.toml. Additionally, this project also uses <code>pytest-cov</code> to calculate the coverage of these unit tests. For more information, check the section about tests later in this document.</p>"},{"location":"contributing/#commit-your-changes-and-push-your-branch-to-github","title":"Commit your changes and push your branch to GitHub","text":"<pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ul> <li>Submit a pull request through the GitHub website.</li> </ul>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your    new functionality into a function with a docstring, and add the feature to    the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#running-tests-locally","title":"Running tests locally","text":"<p>The tests can be executed using the <code>test</code> dependencies of <code>doxs</code> in the following way:</p> <pre><code>$ python -m pytest\n</code></pre>"},{"location":"contributing/#running-tests-with-coverage-locally","title":"Running tests with coverage locally","text":"<p>The coverage value can be obtained while running the tests using <code>pytest-cov</code> in the following way:</p> <pre><code>$ python -m pytest --cov=doxs tests/\n</code></pre> <p>A much more detailed guide on testing with <code>pytest</code> is available here.</p>"},{"location":"contributing/#automation-tasks-with-makim","title":"Automation Tasks with Makim","text":"<p>This project uses <code>makim</code> as an automation tool. Please, check the <code>.makim.yaml</code> file to check all the tasks available or run:</p> <pre><code>$ makim --help\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>feat(pencil)!: The graphiteWidth option has been removed</code> Breaking Release <p>Note: For a breaking change release, uses <code>!</code> at the end of the message prefix.</p> <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"example/","title":"Doxs","text":"In\u00a0[\u00a0]: Copied! <pre>import doxs\n</pre> import doxs In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"example/#doxs","title":"Doxs\u00b6","text":"<p>Doxs is Python library that aims to do ...</p>"},{"location":"example/#getting-started","title":"Getting Started\u00b6","text":"<p>First, check our documentation about the installation.</p> <p>Now, let's import our library:</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Doxs, run this command in your terminal:</p> <pre><code>pip install doxs\n</code></pre> <p>This is the preferred method to install Doxs, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for Doxs can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone https://github.com/xmnlab/doxs.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/xmnlab/doxs.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>poetry install\n</code></pre>"},{"location":"api/","title":"Index","text":""},{"location":"api/#doxs","title":"doxs","text":"<p>Doxs.</p> <p>Modules:</p> <ul> <li> <code>core</code>           \u2013            <p>Doxs core library - YAML-first flavour.</p> </li> </ul>"},{"location":"api/#doxs.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Return the program version.</p> Source code in <code>src/doxs/__init__.py</code> <pre><code>def get_version() -&gt; str:\n    \"\"\"Return the program version.\"\"\"\n    try:\n        return importlib_metadata.version(__name__)\n    except importlib_metadata.PackageNotFoundError:  # pragma: no cover\n        return '0.5.0'  # semantic-release\n</code></pre>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li> doxs<ul> <li> core</li> </ul> </li> </ul>"},{"location":"api/core/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> core","text":""},{"location":"api/core/#doxs.core","title":"core","text":"<p>Doxs core library - YAML-first flavour.</p> <p>Turns YAML-formatted docstrings into enriched numpydoc sections.</p> Example <pre><code>@doxs  # or simply ``@doxs`` if you re-export apply at top level\ndef add(x: int, y: int) -&gt; int:\n    \"\"\"\n    title: Return the sum of two integers\n    summary: |\n        This function returns the sum of two integer numbers.\n    parameters:  # noqa\n        x: The first operand\n        y: The second operand\n    returns: Sum of *x* and *y*\n    \"\"\"\n    return x + y\n</code></pre> <p>The decorator will append a numpydoc block like:</p> <pre><code>Return the sum of two integers.\n\nThis function returns the sum of two integer numbers.\n\nParameters\n----------\nx : int, default is `\u2026`\n    The first operand\n...\n</code></pre> <p>Classes:</p> <ul> <li> <code>DocString</code>           \u2013            <p>Carry a description inside <code>typing.Annotated</code> metadata.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>apply</code>             \u2013              <p>Decorate a class or callable and convert YAML \u2192 numpydoc.</p> </li> </ul>"},{"location":"api/core/#doxs.core.DocString","title":"DocString  <code>dataclass</code>","text":"<pre><code>DocString(description: str)\n</code></pre> <p>Carry a description inside <code>typing.Annotated</code> metadata.</p>"},{"location":"api/core/#doxs.core.apply","title":"apply","text":"<pre><code>apply(\n    _obj: Any = None,\n    *,\n    class_vars: Optional[Dict[str, str]] = None,\n    params: Optional[Dict[str, str]] = None,\n    returns: Optional[Union[str, List[str]]] = None,\n) -&gt; Any\n</code></pre> <p>Decorate a class or callable and convert YAML \u2192 numpydoc.</p> Source code in <code>src/doxs/core.py</code> <pre><code>def apply(\n    _obj: Any = None,\n    *,\n    class_vars: Optional[Dict[str, str]] = None,\n    params: Optional[Dict[str, str]] = None,\n    returns: Optional[Union[str, List[str]]] = None,\n) -&gt; Any:\n    \"\"\"Decorate a class or callable and convert YAML \u2192 numpydoc.\"\"\"\n\n    def decorator(obj: Any) -&gt; Any:\n        if inspect.isclass(obj):\n            return _decorate_class(obj, class_vars or {})\n        if callable(obj):\n            return _decorate_func(obj, params or {}, returns)\n        return obj\n\n    return decorator if _obj is None else decorator(_obj)\n</code></pre>"}]}